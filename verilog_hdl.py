# -*- coding: utf-8 -*-
"""Verilog HDL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16jGArB9PIGDAvyV7njv3-jRonY2RjXz2
"""

#いろんな進数から2進数へ
def d_to_b(binary):
  """
  10進数から2進数に変換
  数字から文字列
  """
  binary=int(binary)
  s=0
  ss=0
  sss=[]

  for i in range(binary):
    if i==0:
      s=binary%2
      ss=binary//2
      sss.insert(0,s)
    else:
      s=ss%2
      ss=ss//2
      sss.insert(0,s)
    if ss==0:
      break
  return sss

def o_to_b(octar):
  """
  8進数から2進数に変換
  数字から文字列
  """
  octar=str(octar)
  s=0
  sss=[]
  for i in range(len(octar)):
    if int(octar[i])==0:
      s=[0,0,0]
    else:
      s=d_to_b(octar[i])
      if int(octar[i])<4:
        s.insert(0,0)
        if int(octar[i])<2:
          s.insert(0,0)
    for i in range(3):
      sss.append(s[i])
  return sss

def h_to_b(hexa:str):
  """
  16進数から2進数に変換
  文字列から文字列
  """
  hexa=str(hexa)
  s=0
  ss=[]
  sss=[]
  for i in range(len(hexa)):
    if hexa[i]=='0':
      ss=[0,0,0,0]
    else:
      s=h_to_d(hexa[i])
      s=int(s)
      if s<8:
        ss=d_to_b(s)
        ss.insert(0,0)
        if s<4:
          ss.insert(0,0)
          if s<2:
            ss.insert(0,0)
      else:
        ss=d_to_b(s)
    for i in range(4):
      sss.append(ss[i])
  return sss


#いろんな進数から10進数へ
def b_to_d(binary):
  """
  2進数から10進数に変換
  数字から数字
  """
  t=str(binary)
  l=len(t)
  s=0
  for i in range(l):
    s+=int(t[-(i+1)])*(2**i)
  return s

def o_to_d(octar):
  """
  8進数から10進数に変換
  数字から数字
  """
  t=str(octar)
  l=len(t)
  s=0
  for i in range(l):
    s+=int(t[-(i+1)])*(8**i)
  return s

def h_to_d(hexa:str):
  """
  16進数から10進数に変換
  文字から数字
  """
  t=str(hexa)
  l=len(t)
  s=0
  for i in range(l):
    if t[-(i+1)]=='A':
      s+=int(10*(16**i))
    elif t[-(i+1)]=='B':
      s+=int(11*(16**i))
    elif t[-(i+1)]=='C':
      s+=int(12*(16**i))
    elif t[-(i+1)]=='D':
      s+=int(13*(16**i))
    elif t[-(i+1)]=='E':
      s+=int(14*(16**i))
    elif t[-(i+1)]=='F':
      s+=int(15*(16**i))
    else:
      s+=int(t[-(i+1)])*(16**i)
  return s

#ポート設定
def input(top,bottom,*args):
  """
  インプット設定
  top:     最上位ビット
  bottom:  最下位ビット
  args:    値
  """
  if top<=bottom:
    raise ValueError('check your top or bottom')
  array=[]
  for i in range(top-bottom):
    array.append(args[i])
  return array

def output(top,bottom,*args):
  """
  インプット設定
  top:     最上位ビット
  bottom:  最下位ビット
  args:    値
  """
  if top<=bottom:
    raise ValueError('check your top or bottom')
  array=[]
  for i in range(top-bottom):
    array.append(args[i])
  return array

#定数及び変数の設定
def parameter(length,base:str,number:str):
  """
  定数設定
  length:  長さ
  base:    基数
  number:  数
  """
  if base=='b':
    lennum=len(number)
    if not length>=lennum:
      raise ValueError('check your length')
    else:
      number=b_to_d(int(number))
      return number

  elif base=='d':
    lennum=len(d_to_b(number))
    if not length>=lennum:
      raise ValueError('check your length')
    else:
      number=int(number)
      return number

  elif base=='o':
    lennum=len(o_to_b(number))
    if not length>=lennum:
      raise ValueError('check your length')
    else:
      number=o_to_d(int(number))
      return number

  elif base=='h':
    lennum=len(h_to_b(number))
    if not length>=lennum:
      raise ValueError('check your length')
    else:
      number=h_to_d(number)
      return number

  else:
    raise ValueError('check your base')

def reg(length,base:str,number:str):
  """
  変数設定
  length:  長さ
  base:    基数
  number:  数
  """
  if base=='b':
    lennum=len(number)
    if not length>=lennum:
      raise ValueError('check your length')
    else:
      number=b_to_d(int(number))
      return number

  elif base=='d':
    lennum=len(d_to_b(number))
    if not length>=lennum:
      raise ValueError('check your length')
    else:
      number=int(number)
      return number

  elif base=='o':
    lennum=len(o_to_b(number))
    if not length>=lennum:
      raise ValueError('check your length')
    else:
      number=o_to_d(int(number))
      return number

  elif base=='h':
    lennum=len(h_to_b(number))
    if not length>=lennum:
      raise ValueError('check your length')
    else:
      number=h_to_d(number)
      return number

  else:
    raise ValueError('check your base')

#出力
def assign(output,*args):
  """
  出力
  output: 出力ポート名
  args:  出力値
  """
  length=len(output)
  for i in range(length*10):
    if output[-(i+1)]==output[0]:
      if not args[-(i+1)]==args[0]:
        raise ValueError('check your output or args')
      else:
        break
  for i in range(length):
    output[i]=args[i]
  return output

button=input(1,0,1)
led=output(4,0,0,0,0,0)

on= parameter(1,'b','1')
off=parameter(1,'b','0')
state=reg(1,'b','0')

if button[0]==1:
  state=on
elif button[0]==0:
  state==off

assign(led,state,state,state,state)

h_to_b('205')

